{"version":3,"sources":["logo.svg","BarChart.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","BarChart","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","data","size","createBarChart","bind","assertThisInitialized","_this2","node","dataMax","max","yScale","scaleLinear","domain","range","select","selectAll","enter","append","exit","remove","style","attr","d","i","_this3","react_default","a","createElement","ref","width","height","Component","App","className","src_BarChart","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6IAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6OCgEzBC,cArDX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAJJI,KAAO,CAAC,EAAE,EAAE,EAAE,GAGAP,EAFdQ,KAAO,CAAC,IAAI,KAIRR,EAAKS,eAAiBT,EAAKS,eAAeC,KAApBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAFZA,mFAMVG,KAAKM,8DAILN,KAAKM,0DAGQ,IAAAG,EAAAT,KACPU,EAAOV,KAAKU,KACZC,EAAUC,YAAIZ,KAAKI,MACnBS,EAASC,cACVC,OAAO,CAAC,EAAGJ,IACXK,MAAM,CAAC,EAAGhB,KAAKK,KAAK,KAEzBY,YAAOP,GACFQ,UAAU,QACVd,KAAKJ,KAAKI,MACVe,QACAC,OAAO,QAEZH,YAAOP,GACFQ,UAAU,QACVd,KAAKJ,KAAKI,MACViB,OACAC,SAELL,YAAOP,GACFQ,UAAU,QACVd,KAAKJ,KAAKI,MACVmB,MAAM,OAAQ,WACdC,KAAK,IAAK,SAACC,EAAGC,GAAJ,OAAc,GAAJA,IACpBF,KAAK,IAAK,SAAAC,GAAC,OAAIhB,EAAKJ,KAAK,GAAKQ,EAAOY,KACrCD,KAAK,SAAU,SAAAC,GAAC,OAAIZ,EAAOY,KAC3BD,KAAK,QAAS,qCAId,IAAAG,EAAA3B,KACL,OACI4B,EAAAC,EAAAC,cAAA,OAAKC,IAAK,SAAArB,GAAI,OAAIiB,EAAKjB,KAAOA,GACzBsB,MAAO,IAAKC,OAAQ,aAnDdC,aCyBRC,mLAxBX,OACEP,EAAAC,EAAAC,cAAA,OAAKM,UAAU,OACbR,EAAAC,EAAAC,cAAA,UAAQM,UAAU,cAChBR,EAAAC,EAAAC,cAAA,2BAaFF,EAAAC,EAAAC,cAAA,QAAMM,UAAU,YACdR,EAAAC,EAAAC,cAACO,EAAD,eAnBQH,aCOEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d11ba501.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport './barChart.css';\nimport { scaleLinear } from 'd3-scale';\nimport { max } from 'd3-array';\nimport { select } from 'd3-selection';\n\nclass BarChart extends Component {\n\n    data = [1,2,3,4]\n    size = [500,500]\n\n    constructor() {\n        super()\n        this.createBarChart = this.createBarChart.bind(this)\n    }\n\n    componentDidMount() {\n        this.createBarChart()\n    }\n\n    componentDidUpdate() {\n        this.createBarChart()\n    }\n\n    createBarChart() {\n        const node = this.node\n        const dataMax = max(this.data)\n        const yScale = scaleLinear()\n            .domain([0, dataMax])\n            .range([0, this.size[1]])\n\n        select(node)\n            .selectAll('rect')\n            .data(this.data)\n            .enter()\n            .append('rect')\n\n        select(node)\n            .selectAll('rect')\n            .data(this.data)\n            .exit()\n            .remove()\n\n        select(node)\n            .selectAll('rect')\n            .data(this.data)\n            .style('fill', '#fe9922')\n            .attr('x', (d, i) => i * 25)\n            .attr('y', d => this.size[1] - yScale(d))\n            .attr('height', d => yScale(d))\n            .attr('width', 25)\n\n    }\n\n    render() {\n        return (\n            <svg ref={node => this.node = node}\n                 width={500} height={500}\n            >\n            </svg>\n        );\n    }\n}\n\nexport default BarChart;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport BarChart from './BarChart'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>\n            Lily Burtness\n          </p>\n          {/* <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a> */}\n        </header>\n\n        <body className=\"App-body\">\n          <BarChart/>\n        </body>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}